#+STARTUP: indent
* Helper functions
** Reload init.el 
#+BEGIN_SRC emacs-lisp
(defun helper-reload-settings () (interactive) (eval '(load-file "~/.emacs.d/init.el"))) ;; Reload init.el
#+END_SRC       
** Newline without break of line
#+BEGIN_SRC emacs-lisp
;; newline-without-break-of-line
(defun newline-without-break-of-line ()
  "1. move to end of the line.
  2. insert newline with index"
  (interactive)
  (let ((oldpos (point)))
    (end-of-line)
    (newline-and-indent)))
#+END_SRC 
** Delete leading whitespace
#+BEGIN_SRC emacs-lisp
(defun my-delete-leading-whitespace (start end)
	  "Delete whitespace at the beginning of each line in region."
	  (interactive "*r")
	  (save-excursion
	    (if (not (bolp)) (forward-line 1))
	    (delete-whitespace-rectangle (point) end nil)))
#+END_SRC 
** Kill whitespace
#+BEGIN_SRC emacs-lisp

(defun kill-whitespace ()
  "Kill the whitespace between two non-whitespace characters"
  (interactive "*")
  (save-excursion
    (save-restriction
      (save-match-data
	(progn
	  (re-search-backward "[^ \t\r\n]" nil t)
	  (re-search-forward "[ \t\r\n]+" nil t)
	  (replace-match "" nil nil))))))

#+END_SRC

** Org mode
*** Adjust region
#+BEGIN_SRC emacs-lisp
(defun org-adjust-region (b e)
  "Re-adjust stuff in region according to the preceeding stuff."
  (interactive "r") ;; current region
  (save-excursion
    (let ((e (set-marker (make-marker) e))
      (_indent (lambda ()
	     (insert ?\n)
	     (backward-char)
	     (org-indent-line)
	     (delete-char 1)))
      last-item-pos)
      (goto-char b)
      (beginning-of-line)
      (while (< (point) e)
    (indent-line-to 0)
    (cond
     ((looking-at "[[:space:]]*$")) ;; ignore empty lines
     ((org-at-heading-p)) ;; just leave the zero-indent
     ((org-at-item-p)
      (funcall _indent)
      (let ((struct (org-list-struct))
	(mark-active nil))
	(ignore-errors (org-list-indent-item-generic -1 t struct)))
      (setq last-item-pos (point))
      (when current-prefix-arg
	(fill-paragraph)))
     ((org-at-block-p)
      (funcall _indent)
      (goto-char (plist-get (cadr (org-element-special-block-parser e nil)) :contents-end))
      (org-indent-line))
     (t (funcall _indent)))
    (forward-line))
      (when last-item-pos
    (goto-char last-item-pos)
    (org-list-repair)
    ))))
#+END_SRC
*** Add ids to items
#+BEGIN_SRC emacs-lisp

(defun my/org-add-ids-to-headlines-in-file ()
  "Add ID properties to all headlines in the current file which do not already have one."
  (interactive)
  (org-map-entries 'org-id-get-create))

;; (add-hook 'org-mode-hook
;;  (lambda ()
;;	    (add-hook 'before-save-hook 'my/org-add-ids-to-headlines-in-file nil 'local)))

(defun my/copy-id-to-clipboard() "Copy the ID property value to killring,
if no ID is there then create a new unique ID.
This function works only in org-mode buffers.

The purpose of this function is to easily construct id:-links to
org-mode items. If its assigned to a key it saves you marking the
text and copying to the killring."
       (interactive)
       (when (eq major-mode 'org-mode) ; do this only in org-mode buffers
	 (setq mytmpid (funcall 'org-id-get-create))
	 (kill-new mytmpid)
	 (message "Copied %s to killring (clipboard)" mytmpid)
       ))
#+END_SRC
*** startup 
#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t)
(setq auto-fill-mode 1)
#+END_SRCa
* Helper hydras
** Fonts hydra
#+BEGIN_SRC emacs-lisp
(defhydra helper-hydra-fonts (:body-pre (message "fonts"))
  "Fonts"
  ("1" (set-default-font "Fira Mono Medium-10")  "Fira")
  ("f" (set-default-font "Fira Mono Medium-10")  "Fira")
  ("2" (set-default-font "Neep-10")  "Neep")
  ("3" (set-default-font "lime-8")  "lime")
)
#+END_SRC
** Org agenda hydra
#+BEGIN_SRC emacs-lisp
(defhydra helper-hydra-org-agenda (:pre (setq which-key-inhibit t)
                                 :post (setq which-key-inhibit nil)
                                 :hint none)
  "
Org agenda (_q_uit)

^Clock^      ^Visit entry^              ^Date^             ^Other^
^-----^----  ^-----------^------------  ^----^-----------  ^-----^---------
_ci_ in      _SPC_ in other window      _ds_ schedule      _gr_ reload
_co_ out     _TAB_ & go to location     _dd_ set deadline  _._  go to today
_cq_ cancel  _RET_ & del other windows  _dt_ timestamp     _gd_ go to date
_cj_ jump    _o_   link                 _+_  do later      ^^
^^           ^^                         _-_  do earlier    ^^
^^           ^^                         ^^                 ^^
^View^          ^Filter^                 ^Headline^         ^Toggle mode^
^----^--------  ^------^---------------  ^--------^-------  ^-----------^----
_vd_ day        _ft_ by tag              _ht_ set status    _tf_ follow
_vw_ week       _fr_ refine by tag       _hk_ kill          _tl_ log
_vt_ fortnight  _fc_ by category         _hr_ refile        _ta_ archive trees
_vm_ month      _fh_ by top headline     _hA_ archive       _tA_ archive files
_vy_ year       _fx_ by regexp           _h:_ set tags      _tr_ clock report
_vn_ next span  _fd_ delete all filters  _hp_ set priority  _td_ diaries
_vp_ prev span  ^^                       ^^                 ^^
_vr_ reset      ^^                       ^^                 ^^
^^              ^^                       ^^                 ^^
"
  ;; Entry
  ("hA" org-agenda-archive-default)
  ("hk" org-agenda-kill)
  ("hp" org-agenda-priority)
  ("hr" org-agenda-refile)
  ("h:" org-agenda-set-tags)
  ("ht" org-agenda-todo)
  ;; Visit entry
  ("o"   link-hint-open-link :exit t)
  ("<tab>" org-agenda-goto :exit t)
  ("TAB" org-agenda-goto :exit t)
  ("SPC" org-agenda-show-and-scroll-up)
  ("RET" org-agenda-switch-to :exit t)
  ;; Date
  ("dt" org-agenda-date-prompt)
  ("dd" org-agenda-deadline)
  ("+" org-agenda-do-date-later)
  ("-" org-agenda-do-date-earlier)
  ("ds" org-agenda-schedule)
  ;; View
  ("vd" org-agenda-day-view)
  ("vw" org-agenda-week-view)
  ("vt" org-agenda-fortnight-view)
  ("vm" org-agenda-month-view)
  ("vy" org-agenda-year-view)
  ("vn" org-agenda-later)
  ("vp" org-agenda-earlier)
  ("vr" org-agenda-reset-view)
  ;; Toggle mode
  ("ta" org-agenda-archives-mode)
  ("tA" (org-agenda-archives-mode 'files))
  ("tr" org-agenda-clockreport-mode)
  ("tf" org-agenda-follow-mode)
  ("tl" org-agenda-log-mode)
  ("td" org-agenda-toggle-diary)
  ;; Filter
  ("fc" org-agenda-filter-by-category)
  ("fx" org-agenda-filter-by-regexp)
  ("ft" org-agenda-filter-by-tag)
  ("fr" org-agenda-filter-by-tag-refine)
  ("fh" org-agenda-filter-by-top-headline)
  ("fd" org-agenda-filter-remove-all)
  ;; Clock
  ("cq" org-agenda-clock-cancel)
  ("cj" org-agenda-clock-goto :exit t)
  ("ci" org-agenda-clock-in :exit t)
  ("co" org-agenda-clock-out)
  ;; Other
  ("q" nil :exit t)
  ("gd" org-agenda-goto-date)
  ("." org-agenda-goto-today)
  ("gr" org-agenda-redo))

  (defhydra helper-hydra-transpose (:color red)
    "Transpose"
     ("c" transpose-chars "characters")
     ("w" transpose-words "words")
     ("o" org-transpose-words "Org mode words")
     ("l" transpose-lines "lines")
     ("s" transpose-sentences "sentences")
     ("e" org-transpose-elements "Org mode elements")
     ("p" transpose-paragraphs "paragraphs")
     ("t" org-table-transpose-table-at-point "Org mode table")
     ("q" nil "cancel" :color blue))

#+END_SRC

** Ediff hydra
#+BEGIN_SRC emacs-lisp
(defhydra helper-hydra-ediff (:color blue :hint nil)
  "
^Buffers           Files           VC                     Ediff regions
----------------------------------------------------------------------
_b_uffers           _f_iles (_=_)       _r_evisions              _l_inewise
_B_uffers (3-way)   _F_iles (3-way)                          _w_ordwise
                  _c_urrent file
"
  ("b" ediff-buffers)
  ("B" ediff-buffers3)
  ("=" ediff-files)
  ("f" ediff-files)
  ("F" ediff-files3)
  ("c" ediff-current-file)
  ("r" ediff-revision)
  ("l" ediff-regions-linewise)
  ("w" ediff-regions-wordwise))
#+END_SRC

** Dired hydra
#+BEGIN_SRC emacs-lisp
(defhydra hydra-dired (:hint nil :color pink)
  "
_+_ mkdir          _v_iew           _m_ark             _(_ details        _i_nsert-subdir    wdired
_C_opy             _O_ view other   _U_nmark all       _)_ omit-mode      _$_ hide-subdir    C-x C-q : edit
_D_elete           _o_pen other     _u_nmark           _l_ redisplay      _w_ kill-subdir    C-c C-c : commit
_R_ename           _M_ chmod        _t_oggle           _g_ revert buf     _e_ ediff          C-c ESC : abort
_Y_ rel symlink    _G_ chgrp        _E_xtension mark   _s_ort             _=_ pdiff
_S_ymlink          ^ ^              _F_ind marked      _._ toggle hydra   \\ flyspell
_r_sync            ^ ^              ^ ^                ^ ^                _?_ summary
_z_ compress-file  _A_ find regexp
_Z_ compress       _Q_ repl regexp

T - tag prefix
"
  ("\\" dired-do-ispell)
  ("(" dired-hide-details-mode)
  (")" dired-omit-mode)
  ("+" dired-create-directory)
  ("=" diredp-ediff)         ;; smart diff
  ("?" dired-summary)
  ("$" diredp-hide-subdir-nomove)
  ("A" dired-do-find-regexp)
  ("C" dired-do-copy)        ;; Copy all marked files
  ("D" dired-do-delete)
  ("E" dired-mark-extension)
  ("e" dired-ediff-files)
  ("F" dired-do-find-marked-files)
  ("G" dired-do-chgrp)
  ("g" revert-buffer)        ;; read all directories again (refresh)
  ("i" dired-maybe-insert-subdir)
  ("l" dired-do-redisplay)   ;; relist the marked or singel directory
  ("M" dired-do-chmod)
  ("m" dired-mark)
  ("O" dired-display-file)
  ("o" dired-find-file-other-window)
  ("Q" dired-do-find-regexp-and-replace)
  ("R" dired-do-rename)
  ("r" dired-do-rsynch)
  ("S" dired-do-symlink)
  ("s" dired-sort-toggle-or-edit)
  ("t" dired-toggle-marks)
  ("U" dired-unmark-all-marks)
  ("u" dired-unmark)
  ("v" dired-view-file)      ;; q to exit, s to search, = gets line #
  ("w" dired-kill-subdir)
  ("Y" dired-do-relsymlink)
  ("z" diredp-compress-this-file)
  ("Z" dired-do-compress)
  ("q" nil)
  ("." nil :color blue))

(eval-after-load "dired" '(progn (define-key dired-mode-map "." 'hydra-dired/body)))
#+END_SRC

** Rectangle hydra
#+BEGIN_SRC emacs-lisp
(defhydra helper-hydra-rectangle (:body-pre (rectangle-mark-mode 1)
                                     :color pink
                                     :hint nil
                                     :post (deactivate-mark))
"
  ^_k_^       _w_ copy      _o_pen       _N_umber-lines        
_h_   _l_     _y_ank        _t_ype       _e_xchange-point      
  ^_j_^       _d_ kill      _c_lear      _r_eset-region-mark   
^^^^          _u_ndo        _g_ quit     ^ ^                   
"
  ("k" rectangle-previous-line)
  ("j" rectangle-next-line)
  ("h" rectangle-backward-char)
  ("l" rectangle-forward-char)
  ("d" kill-rectangle)                    ;; C-x r k
  ("y" yank-rectangle)                    ;; C-x r y
  ("w" copy-rectangle-as-kill)            ;; C-x r M-w
  ("o" open-rectangle)                    ;; C-x r o
  ("t" string-rectangle)                  ;; C-x r t
  ("c" clear-rectangle)                   ;; C-x r c
  ("e" rectangle-exchange-point-and-mark) ;; C-x C-x
  ("N" rectangle-number-lines)            ;; C-x r N
  ("r" (if (region-active-p)
           (deactivate-mark)
         (rectangle-mark-mode 1)))
  ("u" undo nil)
  ("g" nil))      ;; ok
#+END_SRC

** Window hydra
#+BEGIN_SRC emacs-lisp
(defhydra helper-hydra-window (:color red
                        :hint nil)
  "
 Split: _v_ert _x_:horz
Delete: _o_nly  _da_ce  _dw_indow  _db_uffer  _df_rame
  Move: _s_wap
Frames: _f_rame new  _df_ delete
  Misc: _m_ark _a_ce  _u_ndo  _r_edo"
  ("h" windmove-left)
  ("j" windmove-down)
  ("k" windmove-up)
  ("l" windmove-right)
  ("H" hydra-move-splitter-left)
  ("J" hydra-move-splitter-down)
  ("K" hydra-move-splitter-up)
  ("L" hydra-move-splitter-right)
  ("|" (lambda ()
         (interactive)
         (split-window-right)
         (windmove-right)))
  ("_" (lambda ()
         (interactive)
         (split-window-below)
         (windmove-down)))
  ("v" split-window-right)
  ("x" split-window-below)
  ;("t" transpose-frame "'")
  ;; winner-mode must be enabled
  ("u" winner-undo)
  ("r" winner-redo) ;;Fixme, not working?
  ("o" delete-other-windows :exit t)
  ("a" ace-window :exit t)
  ("f" new-frame :exit t)
  ("s" ace-swap-window)
  ("da" ace-delete-window)
  ("dw" delete-window)
  ("db" kill-this-buffer)
  ("df" delete-frame :exit t)
  ("q" nil)
  ;("i" ace-maximize-window "ace-one" :color blue)
  ;("b" ido-switch-buffer "buf")
  ("m" headlong-bookmark-jump))
#+END_SRC
** Yasnippet hydra
#+BEGIN_SRC emacs-lisp
(defhydra helper-hydra-yasnippet (:color blue :hint nil)
  "
              ^YASnippets^
--------------------------------------------
  Modes:    Load/Visit:    Actions:

 _g_lobal  _d_irectory    _i_nsert
 _m_inor   _f_ile         _t_ryout
 _e_xtra   _l_ist         _n_ew
         _a_ll
"
  ("d" yas-load-directory)
  ("e" yas-activate-extra-mode)
  ("i" yas-insert-snippet)
  ("f" yas-visit-snippet-file :color blue)
  ("n" yas-new-snippet)
  ("t" yas-tryout-snippet)
  ("l" yas-describe-tables)
  ("g" yas/global-mode)
  ("m" yas/minor-mode)
  ("a" yas-reload-all))
#+END_SRC
** persp helper hydra
#+BEGIN_SRC emacs-lisp
(desktop-save-mode 1)
(defhydra helper-hydra-persp (:color blue :hint nil)
  ("`" persp-switch "perspective switch")
  ("i" persp-import "perspective import")
  ("n" persp-next "perspective next")
("1" persp-switch-last "last"))

#+END_SRC

* Global keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<Scroll_Lock>") 'toggle-selective-display)
(global-set-key (kbd "<f12>") 'helm-mini)
(global-set-key (kbd "<C-f12>") 'fasd-find-file)
(global-set-key (kbd "C-j") 'join-line)
#+END_SRC

** rctrl map
:PROPERTIES:
:ID:       ba6d5a1c-53f1-47c7-abfe-714c2112381f
:END:                   

#+BEGIN_SRC emacs-lisp

(global-set-key [f8] 'rctrlmap)
 (progn
   ;; define a prefix keymap
   (define-prefix-command 'rctrlmap)
   (define-key rctrlmap [f8 right] (lambda() (interactive) (enlarge-window-horizontally 5)))1
   (define-key rctrlmap [f8 left] (lambda() (interactive) (shrink-window-horizontally 5)))
   (define-key rctrlmap [f8 up] (lambda() (interactive) (enlarge-window 5)))
   (define-key rctrlmap [f8 down] (lambda() (interactive) (shrink-window 5)))

   (define-key rctrlmap [left] 'helm-gtags-previous-history)
   (define-key rctrlmap [right] 'helm-gtags-next-history)
   (define-key rctrlmap [up] 'helm-gtags-dwim)
   (define-key rctrlmap [down] 'helm-gtags-pop-stack)
   (define-key rctrlmap [?\r] 'helm-gtags-select)
   (define-key rctrlmap [f9] 'helm-gtags-tags-in-this-function)
   (define-key rctrlmap (kbd "r") 'helm-gtags-find-rtag)
   (define-key rctrlmap (kbd "C-r") 'helm-gtags-find-rtag)
   (define-key rctrlmap (kbd "f") 'helm-gtags-find-files)
   (define-key rctrlmap (kbd "C-f") 'helm-gtags-find-files)
   (define-key rctrlmap [f8 f8] 'helm-gtags-show-stack)

   (define-key rctrlmap (kbd "d") 'dired)
   (define-key rctrlmap (kbd "p") 'projectile-speedbar-open-current-buffer-in-tree)
   (define-key rctrlmap [f7] 'moo-jump-local)
   (define-key rctrlmap (kbd "w") 'moo-jump-directory)
   (define-key rctrlmap (kbd "a") (lambda() (interactive) (popup-tip rctrlmap_values)))
   (define-key rctrlmap (kbd "C-a") (lambda() (interactive) (popup-tip rctrlmap_values)))
)
(setq rctrlmap_values (cdr rctrlmap))
(setq rctrlmap_values (mapconcat (function (lambda (x) (format "%s\n\n" x) ) ) rctrlmap_values ""))
#+END_SRC

** rshift map
#+BEGIN_SRC emacs-lisp

(global-set-key [f9] 'rshiftmap)
(progn
  ;; define a prefix keymap
  (define-prefix-command 'rshiftmap)
  (define-key rshiftmap [? ] 'er/expand-region)
  (define-key rshiftmap [f9] 'hs-toggle-hiding)
  (define-key rshiftmap (kbd "c") 'aya-create)
  (define-key rshiftmap (kbd "e") 'aya-expand)

  (define-key rshiftmap (kbd "q") 'magit-diff-popup)
  (define-key rshiftmap (kbd "s") 'magit-status)
  (define-key rshiftmap (kbd "a") 'magit-dispatch-popup)
  (define-key rshiftmap (kbd "x") 'magit-commit)
  (define-key rshiftmap (kbd "1") 'hs-toggle-hiding)

  (define-key rshiftmap [?\r] 'helm-do-grep-ag)

  (define-key rshiftmap (kbd "\\") 'ripgrep-regexp)
  (define-key rshiftmap [?\d] 'kill-whitespace)

  (define-key rshiftmap [f7] 'dumb-jump-go)

  (define-key rshiftmap [f8] 'helm-semantic-or-imenu))

  ;; (define-key rshiftmap [f9 f9] '123-menu-display-menu-marc-menu-root)) ;

#+END_SRC

* Org mode
** Options
#+BEGIN_SRC emacs-lisp


(setq org-enforce-todo-dependencies t)
(setq org-track-ordered-property-with-tag t)
(setq org-enforce-todo-checkbox-dependencies t)

(setq org-clock-into-drawer "CLOCKING")

;(add-to-list 'org-drawers "CLOCKING")
;(add-to-list 'org-drawers "LOGBOOK")



;; (global-set-key (kbd "") 'my/copy-id-to-clipboard)


(setq org-agenda-view-columns-initially t)
(defun org-agenda-show-tags-in-columns (&optional arg)
  (interactive "P")
  (org-agenda arg "t"))

#+END_SRC
** capture templates
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates (quote
    (("t" "Todo" entry
      (file+headline "~/org/general.org" "Tasks")
      (file "~/org/templates/todo")
      :empty-lines-after 1)
     ("b" "Book" entry
      (file+headline "~/org/general.org" "Books")
      (file "~/org/templates/book")
      :empty-lines-after 1)
     ("g" "General note" entry
      (file+headline "~/org/general.org" "Capture")
      (file "~/org/templates/general")
      :empty-lines-after 1))))
#+END_SRC
** Agenda files
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (quote ("~/org")))
#+END_SRC

* Syntax highlighting in SRC blocks
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

* recentf/fasd
#+BEGIN_SRC emacs-lisp
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-saved-items 1200)
(setq recentf-max-menu-items 200)
(global-fasd-mode 1)
(run-at-time (current-time) 150 'recentf-save-list)
(setq recentf-auto-cleanup 'never)
#+END_SRC

* F2 Hydra (bookmarks) 

* F1 Hydra (easy access)
#+BEGIN_SRC emacs-lisp
(defhydra hydra-f1 (:color blue :timeout 12 :columns 3)
  "F1 Helpers"
  
  ("<f1>" org-clock-in "Clock in")
  ("<f5>" my/copy-id-to-clipboard "Copy headline ID")
  ("c" org-capture "Capture note")
  
  ("<f2>" org-clock-out "Clock out")
  ("I" my/org-add-ids-to-headlines-in-file "ID all headlines")  
  ("f" helper-hydra-fonts/body "Change fonts")
  
  ("<f3>" org-clock-in-last "Clock in last")
  ("1" helper-hydra-org-agenda/body "Agenda options")
  ("a" org-agenda "Agenda show")
  ("TAB" outline-next-visible-heading "next heading")
  ("4" outline-hide-entry "hide")
  ("t" org-agenda-show-tags-in-columns  "Agenda tags")
  ("E" helper-hydra-ediff/body  "Ediff")
  ("r" helper-hydra-rectangle/body "Rectangle hydra")
  
  ("`" helper-hydra-persp/body "perspective     ")
  ("s" helper-hydra-yasnippet/body "yasnippet hydra")
  
("w" helper-hydra-window/body "Window hydra")

("j" org-adjust-region "Adjust list in region")
("R" helper-reload-settings "Reload settings.org")
("d" org-clock-display "Display clocking")
("q" org-clock-cancel "Cancel a clock")
)

(global-set-key (kbd "<f1>") 'hydra-f1/body)
#+END_SRC

* hide-show mode 

(define-globalized-minor-mode global-hs-minor-mode
  hs-minor-mode hs-minor-mode)

(global-hs-minor-mode 1)
#+BEGIN_SRC emacs-lisp
    (defun toggle-selective-display (column)
      (interactive "P")
      (set-selective-display
       (or column
           (unless selective-display
             (1+ (current-column))))))
#+END_SRC

* 
* Visual setting
** Theme zenburn
#+BEGIN_SRC emacs-lisp
(load-theme 'zenburn t)
#+END_SRC

** Paren mode
#+BEGIN_SRC emacs-lisp
(show-paren-mode 2)
(setq show-paren-style 'parenthesis) ; highlight brackets
(setq show-paren-style 'expression) ; highlight entire expression

;; Autopair parantheses:
(require 'autopair)
(autopair-global-mode) ;; enable autopair in all buffers
(autopair-mode)

#+END_SRC
** Linum
#+BEGIN_SRC emacs-lisp
(global-linum-mode 1)
(setq linum-format "%4d  ") ;; no line
#+END_SRC
** Modeline
#+BEGIN_SRC emacs-lisp
(line-number-mode 1)			; have line numbers and
(column-number-mode 1)			; column numbers in the mode line
(require 'powerline)
(setq powerline-arrow-shape 'arrow14) ;; best for small fonts
#+END_SRC
** highlight search
#+BEGIN_SRC emacs-lisp
(setq ag-highlight-search t)
(add-hook 'ag-mode-hook 'winnow-mode)
(add-hook 'compilation-mode-hook 'winnow-mode) ;; for winnow
(setq case-fold-search t) ;; case insensitive search

#+END_SRC
** Navigate windows with M-<arrows>
#+BEGIN_SRC emacs-lisp
#+END_SRC

** org-bullets
#+BEGIN_SRC emacs-lisp
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

#+END_SRC
* Coding style
#+BEGIN_SRC emacs-lisp

(setq-default c-basic-offset 4)
    (setq c-default-style "linux"
	  c-basic-offset 4)
(setq fasd-enable-initial-prompt nil)

#+END_SRC

* Completion
** Auths-ocomplete options
#+BEGIN_SRC emacs-lisp

(ac-config-default)

(setq ac-auto-show-menu    0.1) 
(setq ac-delay             0.1)
(setq ac-menu-height       20)
(setq ac-auto-start t)
(setq ac-show-menu-immediately-on-auto-complete t)

(require 'cc-mode)
(require 'semantic)

(add-to-list 'ac-modes 'org-mode)

(global-auto-complete-mode t)
(semantic-mode 1)


(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
(set-default 'semantic-case-fold t)

#+END_SRC

** Show completion options (which-key-mode)
#+BEGIN_SRC emacs-lisp
(which-key-mode)
#+END_SRC

** Yasnippet
#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path
	      "~/.emacs.d/manual-packages/yasnippet")
(require 'yasnippet)
(yas-global-mode 1)

(setq nlinum-highlight-current-line t)


#+END_SRC

* Helm
#+BEGIN_SRC emacs-lisp
(require 'helm)


(global-unset-key (kbd "C-x c"))

(global-set-key (kbd "<f7>") 'helm-command-prefix)

(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
(define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

(require 'helm-config)

(global-set-key (kbd "M-x") 'helm-M-x)

(setq helm-autoresize-max-height 30)
(setq helm-autoresize-min-height 30)

(setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
      helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
      helm-scroll-amount                    4 ; scroll 8 lines other window using M-<next>/M-<prior>
      helm-ff-file-name-history-use-recentf t
      helm-echo-input-in-header-line t)

 (helm-autoresize-mode 1)
(helm-mode 1)

#+END_SRC

* Integrate xclipboard with X11
#+BEGIN_SRC emacs-lisp
(require 'xclip)
(xclip-mode 1)
(setq x-select-enable-clipboard t) ;; Ctrl+c in Linux X11
(setq x-select-enable-primary t) ;;selection in X11



#+END_SRC

* Remember place in buffer
#+BEGIN_SRC emacs-lisp
(require 'savehist)
(add-to-list 'savehist-additional-variables 'helm-dired-history-variable)
(savehist-mode 1)
(setq savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
(save-place-mode 1) 
#+END_SRC

* Window movement

#+BEGIN_SRC emacs-lisp
(winner-mode 1)

;; (setq windmove-wrap-around t)
(defun my-change-window-divider ()
  (let ((display-table (or buffer-display-table standard-display-table)))
    (set-display-table-slot display-table 5 ?│)
    (set-window-display-table (selected-window) display-table)))
(set-face-foreground 'vertical-border "black")
(add-hook 'window-configuration-change-hook 'my-change-window-divider)

(defun windmove-emacs-or-tmux(dir tmux-cmd)
  (interactive)
  (if (ignore-errors (funcall (intern (concat "windmove-" dir))))
     nil                       ;; Moving within emacs
     (shell-command tmux-cmd)) ;; At edges, send command to tmux
)

(add-hook 'ag-mode-hook 'winnow-mode)
(add-hook 'compilation-mode-hook 'winnow-mode) ;; for winnow

;;Move between windows wit  h custom keybindings
(global-set-key (kbd "<M-up>")
(lambda () (interactive) (windmove-emacs-or-tmux "up"    "tmux select-pane -U")))
 (global-set-key (kbd "<M-down>")
   '(lambda () (interactive) (windmove-emacs-or-tmux "down"  "tmux select-pane -D")))
 (global-set-key (kbd "<M-right>")
   '(lambda () (interactive) (windmove-emacs-or-tmux "right" "tmux select-pane -R")))
 (global-set-key (kbd "<M-left>")
   '(lambda () (interactive) (windmove-emacs-or-tmux "left"  "tmux select-pane -L")))


(require 'switch-window)
(global-set-key (kbd "C-x o") 'switch-window)
(global-set-key (kbd "C-x 9") 'switch-window-then-swap-buffer)
(global-set-key (kbd "C-x 1") 'switch-window-then-maximize)
(global-set-key (kbd "C-x 2") 'switch-window-then-split-below)
(global-set-key (kbd "C-x 3") 'switch-window-then-split-right)
(global-set-key (kbd "C-x 0") 'switch-window-then-delete)

#+END_SRC

* Stop ESC ESCP ESCP from destroying windows
#+BEGIN_SRC emacs-lisp

(defadvice keyboard-escape-quit (around my-keyboard-escape-quit activate)
  (let (orig-one-window-p)
    (fset 'orig-one-window-p (symbol-function 'one-window-p))
    (fset 'one-window-p (lambda (&optional nomini all-frames) t))
    (unwind-protect
	ad-do-it
      (fset 'one-window-p (symbol-function 'orig-one-window-p)))))

;; Restore previous layout/session/desktop
;;(desktop-save-mode 1)
#+END_SRC

* Tabs always work
#+BEGIN_SRC emacs-lisp
(setq tab-always-indent nil)
#+END_SRC

* Backup options
#+BEGIN_SRC emacs-lisp
;; into one dir

(setq backup-directory-alist '(("" . "~/.emacs.d/emacs-backup")))

(setq make-backup-files nil) ; stop creating backup~ files
(setq auto-save-default nil) ; stop creating #autosave# files

;disable backup
(setq backup-inhibited t)
;disable auto save
(setq auto-save-default nil)

#+END_SRC

* Enable mouse
#+BEGIN_SRC emacs-lisp
;; Mouse support:
(require 'mouse)
(xterm-mouse-mode 1)




#+END_SRC

* Pers mode
#+BEGIN_SRC emacs-lisp

  

#+END_SRC 
